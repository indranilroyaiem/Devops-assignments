## Overview

In this exercise each participant configures and tests a local development environment.

## Introduction to Git

## Customize your workstation

* git config --global user.name "YOUR NAME"
* git config --global user.email "YOUR EMAIL ADDRESS"
 

Make a directory that is named as the same as your team name. Create a file that is the same as your first name without any special punctuation. Initialize the repo, and then make a commit.

* mkdir TEAM
* cd TEAM
* touch NAME
* git init
* git add .
* git commit -m "test git"
* git status

## Create a GitHub identity

* If you don't already have a github account, create one.
* Browse to http://github.com. Supply a username, email address, and password.

## (Optional) Setting up your Github keys

If you want to skip using your username and password each time, you can follow the steps here to set up your ssh keys:

https://help.github.com/articles/generating-ssh-keys/


## Share your GitHub identity with your group. 

 
## Accept invitation to GitHub Admin (Indranilroyaiem)

* Visit https://github.com/indranilroyaiem
* Accept invitation.

## Verify access to repo.

### Create a Working Directory
* cd ~
* mkdir wd
* cd wd

### Clone the initial-git-test repo 

* git clone https://github.com/indranilroyaiem/Github-setup.git
* cd Github-setup
* git remote -v
* update README.md with your name and email address once cloned.
* git status

### Verify that you see that you have modifed README.md 

```
# On branch master
# Changed but not updated:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#  modified:   README.md
#
no changes added to commit (use "git add" and/or "git commit -a")

```

* git add README.md
* git commit -m "added name"
* git status

### Verify that your local repo is ready to be pushed to the remote repo.

```
$ git status
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
nothing to commit (working directory clean)
```

* git push origin master

```
$ git push origin master
Username for 'https://github.com': 
Password :
###output similar to this sample output####
Counting objects: 5, done.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 317 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
   9ebac23..b0fe04e  master -> master

```

**If you run into conflict, pull updates, handle the conflicts, and resubmit edits.

* git pull origin master

Why could you have run into a conflict?

### Problems

* Are you getting an "Error: Permission to ORG/REPO denied to user" error?
 * Verify that you have been added to the organization to be able to write to repositories.
 
 **admin to merge the requests.

## Fork team repo (from GUI)

## Create branching strategy (dev> test > staging > production & include a hotfix branch.

**process that you will handle collaboration and branching for your repo?


## Outcome 

You should have an updated TEAM-repo with

* updated README with everyone from your team's name and email address
* forked remote TEAM-repo
* updated a readme file
* create seperate branches & push to different branch according to process
*update the readme.md file with problems faced and solutions during the process in problems section at last

##Problems section:


